(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-252ff5fa"],{"1c50":function(n,e,t){"use strict";t.r(e);var s=function(){var n=this,e=n._self._c;return e("div",[e("v-md-editor",{staticClass:"github-markdown-body",attrs:{value:n.text,mode:"preview"}}),e("div",{staticStyle:{margin:"20px 0 -30px 30px"}},[e("emoji-reaction")],1),e("div",{staticStyle:{padding:"10px 30px 40px"},attrs:{id:"mengguagua-gitTalk"}})],1)},a=[],r=t("7671"),i=t.n(r),o=(t("db28"),{components:{},data:function(){return{text:"\n  ### 交互规范1.0.2\n  > 默认规范，实际有变动按产品经理需求落地\n  ####  术语说明\n  页面第一层级：即直接可视的页面，如查询列表\n  页面第二层级：即需要交互操作触发显示的页面，如弹框\n  鉴权：权限认证，如cookie或者token认证\n  #### 数据展示\n  - `规则1`：表格数据，涉及到金额字段，需要金额列右对齐\n  #### 数据交互\n  - `规则1`：只要是会直接影响**数据库数据**的操作，都在页面第二层级操作，如删除，需要弹框内操作确认\n  - `规则2`：只要是更新页面内容的操作，都要在操作后刷新页面，显示最新数据\n  - `规则3`：只要是直接影响数据库的操作，按钮都要添加loading，或者finally里关闭弹窗，防止重复请求\n  - `规则4`：表格分页栏，在只有一页时候也要显示\n  - `规则5`：表单上传功能，默认10M，单文件，不限制文件类型(默认不支持文件压缩)\n  - `规则6`：有静态数据需要区分测试和生产的，默认优先让后端提供接口，其次使用中台的公共配置接口\n  - `规则7`：前端的静态数据，例如下拉数据，状态字段，字典等。写死的部分，备注写上什么时间，是谁确认要写死的。\n  #### 页面交互\n  - `规则1`：有鉴权的页面，以下方式二选一：1、跳到对应页面，无权限提示`没有访问权限`；2、判断权限，无权限跳转到`登录页面`\n  - `规则2`：默认第二层级页面不再提供弹框，有需要，让产品在需求内明确指出\n  - `规则3`：接口全局设置超时，超过30s，~~跳转到统一的404页面~~，弹出对话框提示：'请求超时'，让用户点击关闭\n  - `规则4`：项目不强依赖后端接口，`本地调试`时候，保证在后端接口不通情况下页面不白屏(对空数据做判断)\n  - `规则5`：后端接口状态500，提示文案\"网络拥堵，稍候再试\"\n  - `规则6`：下拉选择框卡顿，原因是下拉数据过多，前端统一截取200条下拉数据，并要求后端接口响应时间在0.5s以内(特殊情况时间可放宽)\n  - `规则7`：管理后端等需要登录的项目，都默认要求产品提供登出逻辑，不能原型不提供前端就不开发。\n  - `规则8`：有查询栏的页面，下拉查询，日期查询默认都要支持'x'删除当前值，除非产品特殊指定比如默认不能空的，另外再处理。\n  #### 报错交互\n  - `规则1`：api接口统一都要经过拦截器\n  - `规则2`：api接口的报错，http状态码为200时，和服务端开发沟通，要求提供三大类状态码。\n  - `规则3`：三大类状态码要求为：`状态1：正常状态`，`状态2：通用错误状态`，`状态3：有错误编码的状态`\n  - `规则4`：通用错误状态：统一提示`'网络拥堵'`\n  - `规则5`：有错误编码的状态：假设服务端不提供`状态3`，则让服务端在`状态2`提供`报错msg`信息，前端显示msg，但限制长度`20`个字符，超长显示`...`\n  - `规则6`：假设服务端提供`状态3`，前端直接显示对应的报错msg。\n  - `规则7`：特殊情况，如导入excel接口，`状态3`提供冗长的数据填报位置的错误信息，前端需要处理为`页面侧面弹窗`，处理文案排列，友好显示报错提示，默认不关闭，支持点`'我知道了'`按钮关闭\n  ```\n  // 伪代码示例\n  resp => {\n    if (resp.response.code == 未登录) {\n      跳转登录页面\n    } else if ( resp.response.code == 正常状态 ) {\n      return res.data;\n    } else if ( resp.response.code == 通用错误状态 ) {\n      弹框提示：网络拥堵\n      return Promise.reject(resp);\n    } else if ( resp.response.code == 特殊场景报错(excel导入报错) ) {\n      侧边弹框提示：具体的长字符串报错信息（如用:Notification组件）\n      return Promise.reject(resp);\n    } else {\n      弹框提示：resp.response.msg(服务端定义的报错消息)\n      return Promise.reject(resp);\n    }\n  }\n  ```\n      "}},methods:{},mounted:function(){var n=new i.a({id:location.pathname,owner:"mengguagua",repo:"mengguagua.github.io",clientID:"684b1eb15fb986047ff5",clientSecret:"f44d2fcd8864fd1b871c5efb2e9d22ef22a96ab2",admin:["mengguagua"],proxy:"https://mellifluous-bombolone-049a57.netlify.app/github_access_token",createIssueManually:!0});n.render("mengguagua-gitTalk")}}),c=o,p=(t("bd57"),t("2877")),u=Object(p["a"])(c,s,a,!1,null,"4add93a4",null);e["default"]=u.exports},8736:function(n,e,t){},bd57:function(n,e,t){"use strict";t("8736")}}]);
//# sourceMappingURL=chunk-252ff5fa.95197f3a.js.map