(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-5627279b"],{"023b":function(n,e,t){},"74d7":function(n,e,t){"use strict";t.r(e);var l=function(){var n=this,e=n._self._c;return e("div",[e("v-md-editor",{staticClass:"github-markdown-body",attrs:{value:n.text,mode:"preview"}}),e("div",{staticClass:"demo-content"},[e("h4",[n._v("页面效果1")]),e("easy-table",{attrs:{columns:n.tableColumns,data:n.tableData},scopedSlots:n._u([{key:"eeHeader",fn:function(){return[e("el-select",{attrs:{placeholder:"请选择",size:"mini"},model:{value:n.value,callback:function(e){n.value=e},expression:"value"}},[e("el-option",{attrs:{label:"12345",value:"12345"}})],1)]},proxy:!0}])})],1),e("v-md-editor",{staticClass:"github-markdown-body",attrs:{value:n.text2,mode:"preview"}}),e("div",{staticClass:"demo-content"},[e("h4",[n._v("页面效果2")]),e("easy-table",{attrs:{columns:n.tableColumns,data:n.tableData,tableLoading:!0}})],1),e("v-md-editor",{staticClass:"github-markdown-body",attrs:{value:n.text3,mode:"preview"}}),e("div",{staticClass:"demo-content"},[e("h4",[n._v("页面效果3")]),e("easy-table",{attrs:{columns:n.tableColumns3,data:n.tableData,highlightCurrentRow:!1,border:!0,stripe:!1,showIndex:!0,indexOptions:{label:"序号",width:"60"},sumText:"统计",showSummary:!0,needSummaryIndex:[2],cellStyle:n.setCellStyle,headerStyle:n.setHeaderStyle,selection:!0},on:{"current-change":function(e){n.selectedRow=e},select:n.select,"select-all":n.selectAll,"row-dblclick":n.dblclick}})],1),e("v-md-editor",{staticClass:"github-markdown-body",attrs:{value:n.text4,mode:"preview"}}),e("div",{staticClass:"demo-content"},[e("h4",[n._v("页面效果4")]),e("easy-table",{attrs:{stripe:!1,pageTotal:2e3,columns:n.tableColumns,data:n.tableData2,showLoadMore:!0},on:{"load-more":n.loadMore}})],1)],1)},o=[],a=(t("14d9"),t("99af"),t("08cf")),r={components:{easyTable:a["default"]},data:function(){return{value:"",text:"\n  ### 分页表格\n  #### easy-table基础用法\n  - `data`：表格数据，对象数组格式，`必须属性`\n  - `columns`：表格字段，对象数组格式，`必须属性`\n  ##### columns内对象属性和方法\n  - `name`：获取数据的接口字段。字符串\n  - `title`：表头展示的字段。字符串\n  - `sortable`：是否可排序。布尔值默认false\n  - `fixed`：是否固定在左侧或者右测。字符串可选值`left/right`，默认不设置\n  - `showOverflowTooltip`：在单元格内容过长时候显示`...`，鼠标悬浮显示Tooltip\n  - `align`：列表数据文案位置，字符串默认'left'，可选值：`left/center/right`\n  - `headerAlign`：表头文案位置，字符串默认'left'，可选值：`left/center/right`\n  - `show`：列是否显示，使用场景：有相似的页面列表，只是增减了某个列，通过这个属性可以复用。function或者布尔值\n  - `formatter`：自定义展示内容。前三个入参row, cell, value分别是当前行对象，当前格对象，当前格数值。function\n  - `buttons`：操作列，提供交互操作。对象数组\n  > **buttons**对象属性如下\n  > `name`：交互按钮名称，字符串\n  > `click`：点击触发方法，两个方法入参，第一个是index，第二个是当前行row数据。function\n  > `show`：是否显示操作按钮，入参row当前行数据。function\n  - `type`：自定义单元格类型，可选值：`label/operate`\n  - `labels/buttons`：type为label时候。可设置是否自定义单元格内容。对象数组类型，可选值：`labels/buttons`\n  > **labels**对象属性如下\n  > `name`：单元格内容，字符串\n  > `show`：是否展示当前tab。function，方法返回row为当前行\n  > `tag`：返回tag颜色类型。function，方法返回row为当前行，return可选值为`success/info/warning/danger`\n\n  > **buttons**对象属性如下\n  > `show`：是否展示当前单元格。function，方法返回row为当前行\n  > `click`：点击单元格触发方法，两个方法入参，第一个是index，第二个是当前行row数据。function\n  - `buttons`：type为operate时候。可设置是否自定义单元格内容。对象数组类型，可选值：`buttons`\n  > **buttons**对象属性如下\n  > 使用方式同type为label时的buttons设置\n\n  ##### 示例代码1\n  ```pug\n  easy-table(\n    :columns=\"tableColumns\"\n    :data=\"tableData\"\n  )\n  // js\n  // 数据\n  tableData: [\n    {\n      aa: '如果超人不会飞',\n      bb: 100,\n      cc: 1,\n      dd: 1,\n      ee: 12345,\n    }, {\n      aa: '如果超人不会飞2+如果超人不会飞2+如果超人不会飞2+如果超人不会飞2+如果超人不会飞2+如果超人不会飞2+如果超人不会飞2',\n      bb: 200,\n      cc: 1,\n      dd: 0,\n      cee: 1234567,\n    },\n  ],\n  // 列声明\n  tableColumns: [\n    {\n      name: 'aa',\n      title: '字段1',\n      sortable: true,\n    },\n    {\n      name: 'ee',\n      title: 'ID',\n      type: 'label',\n      buttons: [\n        {\n          show: (row) => {\n            return row.ee === 12345;\n          },\n          click: this.clickId.bind(this),\n        }\n      ],\n      formatter: (row, cell, value) => {\n        return row.ee;\n      }\n    },\n    {\n      title: '类型',\n      type: 'label',\n      labels: [\n        {\n          name: '成功',\n          show: (row) => {\n            return row.dd === 1;\n          },\n          tag: (row, column) => {\n            if (row.dd === 1) {\n              return 'success';\n            }\n          }\n        }, {\n          name: '失败',\n          show: (row) => {\n            return row.dd === 0;\n          },\n          tag: (row, column) => {\n            if (row.dd === 0) {\n              return 'danger';\n            }\n          }\n        }\n      ],\n    },\n    {\n      name: 'bb',\n      title: '字段2',\n      show: () => {\n        return false;\n      },\n    },\n    {\n      name: 'cc',\n      title: '字段3',\n      formatter: (row, cell, value) => {\n        let dic = {\n          0: '申请中',\n          1: '通过'\n        };\n        console.log(cell)\n        return dic[value];\n      }\n    },\n    {\n      title: '操作',\n      type: 'operate',\n      width: '150',\n      fixed: 'right',\n      align: 'center',\n      headerAlign: 'center',\n      buttons: [\n        {\n          name: '详情',\n          click: this.doHandle.bind(this),\n          show: (row) => {\n            return row.cc == 1;\n          }\n        },\n      ]\n    }\n  ],\n  methods: {\n    doHandle(index, row) {\n      console.log('index', index);\n      console.log('row', row);\n    },\n    clickId(index, row) {\n      console.log('index', index);\n      console.log('row', row);\n    },\n  }\n  ```\n      ",text2:'\n  #### 加载状态\n  - `tableLoading`：加载状态，布尔值默认false\n  ##### 示例代码2\n  ```pug\n  easy-table(\n    :columns="tableColumns"\n    :data="tableData"\n    :tableLoading="true"\n  )\n  ```\n      ',text3:"\n  #### easy-table属性和方法\n  - `highlightCurrentRow`：是否高亮当前选中行，布尔值默认true\n  - `border`：表格样式，格子样式，布尔值默认false\n  - `stripe`：是否显示斑马纹，布尔值默认true\n  - `showIndex`：是否显示序列号，布尔值默认false\n  - `showSummary`：是否显示合计，布尔值默认false\n  - `sumText`：合计的字符串名称，字符串默认'合计'\n  - `needSummaryIndex`：需要合计的下标数组，列数据是Number才合计，数组\n  - `cellStyle`：设置单元格或者一行的单元格样式。function，返回样式字符串\n  - `headerStyle`：设置表头单元格样式，使用方式同cellStyle\n  - `@current-change`：选中当前行时触发。方法如参返回当前行row\n  - `selection`：是否显示勾选栏，布尔值默认false\n  - `@select`：单选触发，函数返回一个对象数组，单选，入参返回有一个对象的数组\n  - `@select-all`：多选触发，函数返回一个对象数组，多选，入参返回有多个对象的数组\n  - `@row-dblclick`：双击表格行，返回当前行数据\n  - `indexOptions`：序号列设置，label可自定义设置，默认字符'#'；width可自定义设置，默认宽度50。对象类型\n  ##### 示例代码3\n  ```pug\n  easy-table(\n    :columns=\"tableColumns3\"\n    :data=\"tableData\"\n    :border=\"true\"\n    :stripe=\"false\"\n    :showIndex=\"true\"\n    :indexOptions=\"{label: '序号', width: '60'}\"\n    sumText=\"统计\"\n    :showSummary=\"true\"\n    :needSummaryIndex=\"[2]\"\n    :cellStyle=\"setCellStyle\"\n    :headerStyle=\"setHeaderStyle\"\n    @current-change=\"(currentRow) => { selectedRow = currentRow }\"\n    :selection=\"true\"\n    @select=\"select\"\n    @select-all=\"selectAll\"\n    @row-dblclick=\"dblclick\"\n  )\n  // js\n   data() {\n    return {\n      selectedRow: null,\n      tableColumns3: [\n        {\n          name: 'aa',\n          title: '字段1',\n        },\n        {\n          name: 'bb',\n          title: '字段2',\n          sortable: true,\n          show: () => {\n            return true;\n          },\n        },\n        {\n          name: 'cc',\n          title: '字段3',\n          formatter: (row, cell, value) => {\n            let dic = {\n              0: '申请中',\n              1: '通过'\n            };\n            return dic[value];\n          }\n        },\n        {\n          title: '操作',\n          type: 'operate',\n          width: '150',\n          buttons: [\n            {\n              name: '详情',\n              click: this.doHandle.bind(this),\n              show: (row) => {\n                return row.cc == 1;\n              }\n            },\n          ]\n        }\n      ],\n    }\n  }\n  methods: {\n    setCellStyle(obj) {\n      // row行数据，rowIndex行下标，column列对象，columnIndex列下标\n      console.log('obj',obj);\n      if (obj.row.bb > 100 && obj.columnIndex === 2) {\n        return 'color: red';\n      }\n    },\n    select(rows) {\n      console.log(rows);\n    },\n    selectAll(rows) {\n      console.log('全选', rows);\n    },\n    dblclick(row, column, event) {\n      console.log('row', row);\n      console.log('column', column);\n      console.log('event', event);\n    },\n  }\n  ```\n      ",text4:'\n  #### 分页用法\n  这里分页，采取前端分页逻辑，即`约定`一次性查询 `200 `条数据，由前端处理，根据每页几条，分出有几页。当需要200条之后的数据，需要设置`更多`按钮，\n  每次点击`更多`，查询200条叠加到之前的表格数据数组。\n  - `pageTotal`：表格数据合计，Number默认0。若0显示当前data数组长度的数据量。部分场景要求知道总数据量，但实际前端只查询200条，这时可以单独设置pageTotal\n  - `showPagination`：是否强制显示分页栏。布尔值默认false。分页栏默认当数据不满一页时，不显示分页栏\n  - `pageSize`：每页几条数据。Number默认10\n  - `showLoadMore`：是否显示更多按钮。布尔值默认false\n  - `@load-more`：点击更多按钮触发方法。方法处理date数据，拼接数组如：this.tableData.concat(resp.data);\n  ##### 示例代码4\n  ```pug\n  easy-table(\n    :stripe="false"\n    :pageTotal="2000"\n    :columns="tableColumns"\n    :data="tableData2"\n    :showLoadMore="true"\n    @load-more="loadMore"\n  )\n  // js\n  loadMore() {\n    // 处理表格数据逻辑，类似例如\n    // let page = this.tableData.length / 200;\n    // let data = {...this.formData};\n    // data.pageIndex = page;\n    // this.loading = true;\n    // commonInterface(data).then((resp) => {\n    //   this.loading = false;\n    //   this.tableData = this.tableData.concat(resp.data);\n    // }).catch(() => {\n    //   this.loading = false;\n    // });\n  },\n  ```\n      ',selectedRow:null,tableColumns:[{name:"aa",title:"字段1",sortable:!0,showOverflowTooltip:!0},{name:"ee",title:"ID",headerSoltName:"eeHeader",type:"label",buttons:[{show:function(n){return 12345===n.ee},click:this.clickId.bind(this)}],formatter:function(n,e,t){return n.ee}},{title:"类型",type:"label",labels:[{name:"成功",show:function(n){return 1===n.dd},tag:function(n,e){if(1===n.dd)return"success"}},{name:"失败",show:function(n){return 0===n.dd},tag:function(n,e){if(0===n.dd)return"danger"}}]},{name:"bb",title:"字段2",show:function(){return!1}},{name:"cc",title:"字段3",formatter:function(n,e,t){var l={0:"申请中",1:"通过"};return l[t]}},{title:"操作",type:"operate",width:"150",fixed:"right",align:"center",headerAlign:"center",buttons:[{name:"详情",click:this.doHandle.bind(this),show:function(n){return 1==n.cc}}]}],tableColumns3:[{name:"aa",title:"字段1"},{name:"bb",title:"字段2",sortable:!0,show:function(){return!0}},{name:"cc",title:"字段3",formatter:function(n,e,t){var l={0:"申请中",1:"通过"};return l[t]}},{title:"操作",type:"operate",width:"150",buttons:[{name:"详情",click:this.doHandle.bind(this),show:function(n){return 1==n.cc}}]}],tableColumns2:[{name:"aa",title:"字段1",show:!0},{name:"bb",title:"字段2",show:function(){return!0},formatter:function(n,e,t){return t}},{name:"cc",title:"字段3",formatter:function(n,e,t){var l={0:"申请中",1:"通过"};return l[t]}},{title:"操作",type:"operate",width:"150",buttons:[{name:"详情",click:this.doHandle.bind(this),show:function(n){return 1==n.cc}}]}],tableData:[{aa:"如果超人不会飞",bb:100,cc:1,dd:1,ee:12345},{aa:"如果超人不会飞2+如果超人不会飞2+如果超人不会飞2+如果超人不会飞2+如果超人不会飞2+如果超人不会飞2+如果超人不会飞2",bb:200,cc:1,dd:0,cee:1234567}],tableData2:[]}},methods:{setCellStyle:function(n){if(n.row.bb>100&&2===n.columnIndex)return"color: red"},setHeaderStyle:function(n){if(2===n.columnIndex)return"color: red"},select:function(n){console.log(n)},selectAll:function(n){console.log("全选",n)},dblclick:function(n,e,t){console.log("row",n),console.log("column",e),console.log("event",t)},search:function(){},reset:function(){this.formData={}},doHandle:function(n,e){console.log("index",n),console.log("row",e)},clickId:function(n,e){console.log("index",n),console.log("row",e)},loadMore:function(){}},created:function(){for(var n=0;n<1200;n++)this.tableData2.push({aa:"如果超人不会飞"+n,bb:"如果如果超人不会飞如果超"+n,cc:0});this.tableData2=this.tableData2.concat(this.tableData).reverse()}},s=r,c=(t("8e02"),t("2877")),i=Object(c["a"])(s,l,o,!1,null,"4cd342e2",null);e["default"]=i.exports},"8e02":function(n,e,t){"use strict";t("023b")}}]);
//# sourceMappingURL=chunk-5627279b.3b02452d.js.map