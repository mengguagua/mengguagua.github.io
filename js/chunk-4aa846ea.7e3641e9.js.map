{"version":3,"sources":["webpack:///./src/pages/other/cssRule.vue?4ceb","webpack:///./src/pages/other/cssRule.vue","webpack:///src/pages/other/cssRule.vue","webpack:///./src/pages/other/cssRule.vue?ec5f","webpack:///./src/pages/other/cssRule.vue?171b"],"names":["render","_vm","this","_c","_self","staticClass","attrs","text","staticRenderFns","components","data","methods","component"],"mappings":"gHAAA,W,kECAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACA,EAAG,cAAc,CAACE,YAAY,uBAAuBC,MAAM,CAAC,MAAQL,EAAIM,KAAK,KAAO,aAAaJ,EAAG,MAAM,CAACE,YAAY,kBAAkB,IAElNG,EAAkB,GCMP,GACfC,cAEAC,KAHA,WAIA,OACAH,ihxBAo2BAI,YCj3BgW,I,wBCQ5VC,EAAY,eACd,EACAZ,EACAQ,GACA,EACA,KACA,WACA,MAIa,aAAAI,E","file":"js/chunk-4aa846ea.7e3641e9.js","sourcesContent":["export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./cssRule.vue?vue&type=style&index=0&id=fa9ecda6&prod&scoped=true&lang=css&\"","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('v-md-editor',{staticClass:\"github-markdown-body\",attrs:{\"value\":_vm.text,\"mode\":\"preview\"}}),_c('div',{staticClass:\"demo-content\"})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template lang=\"pug\">\n  div\n    v-md-editor.github-markdown-body(:value=\"text\" mode=\"preview\")\n    div.demo-content\n</template>\n\n<script>\n\nexport default {\n  components: {\n  },\n  data() {\n    return {\n      text: `\n> 推荐有一定css经验的人阅读，结合实际场景可系统性学习css各个知识模块\n>\n> 作者:gaocc / 修订时间：2023-03-14\n\n#### 历史\n\n1996开始有css1，1998有css2，然后采取了独立模块开发方式，即现有功能分开开发，不必等到所有模块都达到css3的标准才一起发布。所以现在我们使用到的css是: 部分css功能是css3，部分是css4或者css2\n\n#### 基础概念\n\n##### 元素类型\n\n置换元素：置换元素的内容不是文档直接表示，如img，input标签\n\n非置换元素：非置换元素的内容是文档直接表示，span，div等几乎全部的标签\n\n##### 元素显示方式\n\n块级：块级元素，生成一个填满父级元素内容的框，**前后断行**，例如p，div标签\n\n行内：行内元素，不前后断行，例如a，span标签\n\n> **tip:** 行内非置换元素(如span)，不支持设置width，height\n\n#### 选择器\n\n> id选择，类选择，属性选择，伪类选择，伪元素选择，如果没有依附某个元素，默认是通用选择器\n\n##### 直接选择\n\n- 通用选择：*{color: red};\n- 群组选择：h1, p {color: red};\n- 类选择：标签定义class后 .error{color: red};\n- 依附元素的类选择：div.error{color: red};\n- id选择：用法同类选择，区别：id在html是唯一的，特指度比类选择高\n- 属性选择：普通匹配由其他选择器可代替。特点是可精准匹配如：a[href=\"https://baidu.com\"]{color: red}; 可结合业务逻辑使用\n\n##### 文档关系选择\n\n- -- 根据文档结构选择 --\n\n  > \\`\\`\\`html\n  > <div class=\"top\">\n  >     <span></span>\n  >     <p class=\"title\"></p>\n  >     <span>\n  >       <span></span>\n  >     </span>\n  >     <p>\n  >        <strong></strong>\n  >     </p>\n  >     <a></a>\n  > </div>\n  > <span></span>\n  > \\`\\`\\`\n\n  - div是p的父元素\n  - a和p是div的子元素\n  - div是strong的祖辈元素\n  - strong是div的后代元素\n  - div内的span和span是兄弟(同胞)元素，同级相邻\n\n- 后代选择：div span {color: red}; 对div内的所有span生效\n\n- 子元素选择 div > span {color: red}; 对div内的子元素span生效。后代和子元素结合，可以更精准的选择\n\n- 紧邻兄弟选择 div p + span{color: red}; div内p标签同级且跟在后面的第一个span生效\n\n- 连续兄弟选择 div p ~ span{color: red}; div内p标签同级且跟在后面的所有span生效\n\n##### 伪类选择\n\n- **伪类**，\\`:\\`号跟一个词，伪类始终指代所依附的元素。\n\n  ----结构伪类----\n\n  - 选择根元素，\\`:root\\`。html里根元素就是html标签\n  - 选择元素的**第一个子元素**，\\`:first-child\\`。tip：子元素包括文本内容\n\n    > \\`<span>this is dog</span>\\`\n    >\n    > span:first-child 效果等同如下\n    >\n    > \\`<span class=\"first-child \">this is dog</span>\\`\n  - 选择元素的**最后一个子元素**，\\`:last-child\\`使用同上\n  - 选择元素的**第N个子元素**，\\`:nth-child()\\`，如:nth-child(1)等效于:first-child。括号内可以写代数表达式，例如div:nth-child(2n+1){color: red}，n是0，1，2，3，4到无穷大，即得到1，3，5，7...子元素是红色文本。(同时**影响子孙元素**)\n  - 从**最后一个**开始选择元素的**第N个子元素**，\\`:nth-last-child()\\`，使用方式如:nth-child()\n\n  -----动态伪类-----\n\n  - 超链接伪类，\\`a:link\\`和\\`a:visited\\`，分别是链接\\`未访问\\`和\\`已访问\\`的伪类\n  - 用户操作伪类\n    - \\`:focus\\`，获得输入焦点的元素\n    - \\`:hover\\`，鼠标指针放置其上的元素\n    - \\`:active\\`，当前输入激活的元素，如a标签点击时的状态\n\n  -----UI状态伪类-----\n\n  - \\`:enabled\\` 和 \\`:disabled\\`，设置元素是否可以选择，激活，交互\n\n  - \\`:checked\\`选中时的伪类，单选和复选框有这个状态\n\n  - \\`:required\\`匹配必填的表单控件\n\n    - 如：input:required {color: red}; 匹配 \\`\\`\\`<input type=\"email\" required>\\`\\`\\`\n\n  - \\`:valid\\`和\\`invalid\\`有效性伪类，分别是 符合条件 和 不符合条件，使用如下\n\n    \\`\\`\\`<input type=\"email\">\\`\\`\\`\n\n    \\`\\`\\`input[type=\"email\"]:focus:invalid{background-image:url(邮件验证失败.jpg)}\\`\\`\\`\n\n    \\`\\`\\`input[type=\"email\"]:focus:valid{background-image:url(邮件验证成功.jpg)}\\`\\`\\`\n\n  - 其他还有，:in-range,  :out-of-range,  :read-write,  :read-only,  :lang等，自行谷歌搜索\n\n  -----否定伪类-----\n\n  - \\`:not()\\`，依附在元素上，括号中是简单选择符**或**伪类，比如id选择，类选择。\n    - p:not(.title) { font-size: 12px };   意思是没有class .title的p标签字体大小是12px\n\n##### 伪元素选择\n\n- **伪元素**，\\`::\\`跟一个词，在文档中**插入虚拟的元素**，伪元素只能在选择符最后\n\n  - ::first-letter，装饰非行内元素的首字母(块级元素)，如，p::first-letter{ color:red }; 首字母红色\n\n    - 可以理解为dom结构里会多一个\\`\\`\\`<p-first-letter>\\`\\`\\`标签\n\n  - ::first-line，装饰块级元素文本的首行\n\n  - ::before和::after， 前置内容伪元素和后置内容伪元素，例如:\n\n    \\`\\`\\`css\n    // 给h1标题前后添加\\`[[]]\\`红色符号。也可以直接空格，设置block，长宽，裁剪，渲染出一个箭头\n    h1::before {\n      content: \"[[\"; color: red\n    };\n    h1::after {\n      content: \"]]\"; color: red\n    }\n    \\`\\`\\`\n\n    > content可以插入字符，也可以插入url，如content:url(\"./a.png\")\n\n#### 特指度和层叠\n\n\\`特指度\\`可以理解为显示权重。一个元素被多个选择器指定，且设置的样式冲突时，比较特指度大小，选择大的渲染样式。特指度由四部分构成，**左侧值最大**，如0，0，0，0\n\n- html标签内元素样式加1，0，0，0\n\n- 选择符每个id加0，1，0，0\n- 每个类选择，属性选择，或伪类加0，0，1，0\n- 每个元素，伪元素加0，0，0，1\n\n  \\`\\`\\`css\n  h1 {color: red;} // 0，0，0，1\n  body h1 {color: blue;} // 0，0，0，2 胜出\n  h2.title {font-size: 20px;} // 0，0，1，1 胜出\n  h2 {font-size: 14px;} // // 0，0，0，1\n  \\`\\`\\`\n\n  > 可以样式末尾设置重要声明，\\`!important\\`，同级重要声明优先渲染。\n  >\n  > h1 {color: red !important;}  // 胜出\n  >\n  > body h1 {color: blue;}\n\n\\`继承\\`，指子元素会实现祖辈元素的样式，如body设置color：red，子孙元素默认字红色。部分样式不继承，如border，margin，padding等。**继承的样式，特指度最低**。\n\n\\`层叠\\`，用于处理同一特指度的样式生效哪一个。**同权重的，按声明顺序，后声明覆盖先声明**。\n\n> 导入的样式文件，声明位置是当前文件<style></style>最上方(这就是为什么常说css当前文件>导入文件)\n\n#### 值和单位\n\n\\`值\\`，样式的值用一个词声明，叫**关键字**。比如none，{ text-decoration: none }去掉a标签的下划线。\n\n样式的值可以用**字符串**声明。样式的值可以用**url**声明。样式的值可以用**数字/百分比**声明。\n\n\\`单位\\`，分绝对长度单位 和 相对长度单位\n\n-----绝对长度单位-----\n\n- 英寸in/厘米cm/毫米mm/四分之一毫米q/点pt/派卡pc    -----以上是不常用的单位\n- 像素px，1px大小和实际打印的1px大小不一定相等，实际打印效果由计算机缩放系统控制。\n\n-----相对长度-----\n\n- em：相对当前元素的字号，如span默认14px，1em 等于 14px\n- rem：同em，区别是相对元素是根元素，即html。通过设置html {font-size: 14px}，确定1rem等于多大\n- ch：相对于字符0的宽度，3ch就是3个0的宽度距离\n- ex：指小写字母x的高度，0.5ex = 小写x的一半的高度。\n\n-----可视区域单位-----\n\n- vw/vh，可视区域宽和高，100vw就是满宽，100vh就是满高；同理还有vmin和vmax，取可视区域宽高里小的值。\n\n\\`计算值\\`，**calc()**，括号内允许使用**加减乘除和括号**符号，如：div {width: calc(90vw - 20px);}\n\n> 加减运算符，前后要有**空格**，目的是防止混淆负数\n\n#### 颜色\n\n- \\`rgb()\\`，三个入参，对应红绿蓝，可以是百分比或者整数，取值范围是0%-100%和0-255\n  - 如：rgb(100%,100%,100%) 等同于 rgb(255,255,255)\n- \\`HSL和HSLA\\`: hue-色相 | saturation-饱和度 | lightness-明度;  取值是0-360，0%-100%，0%-100%。\n  - 色相是一个环，0是红，然后按红，橙，黄，绿，青，蓝，紫渐变，360又是红\n  - 饱和度是颜色强度，0就是灰色(明度不是0)\n  - 明度是亮暗，0就是黑色，100是白色。\n  - 例如：color: hsl(40, 70%, 80%)\n\n#### css变量\n\n以\\`--\\`开头定义变量名，后接具体样式值。使用时候借助var()调用变量名。\n\n\\`\\`\\`css\n:root {\n\\t--base-text-color:  #666;\n\\t--base-title-color: #333;\n}\n\n.title {\n\\tcolor: var(--base-title-color)\n}\n\\`\\`\\`\n\n#### 文字/文本\n\n##### 字体\n\n- 自定义字体\n\n   \\`\\`\\`\n    @font-face {\n    \\tfont-family: \"字体名称\";\n    \\tsrc: url(\"\")// 字体库地址\n    }\n   \\`\\`\\`\n\n**字重**\n\n- font-weight: 100-900 或者 normal，bold。**字重不直接代表字体粗细**，其中100-900是九档，对应字体族类型，但一般字体族只有5档，所以通常的100，200，300对应细字体，400对应normal，500对应medium字体族类型，600，700对应bold，800，900对应extra bold字体族。\n\n  > 因此，实际场景会遇到修改了字重，比如400改成500，但粗细没变化。原因是字体本身没支持。\n\n- font-weight: border，比父元素粗一号\n\n- font-weight: lighter，比父元素细一号\n\n\n**字号**\n\nfont- size: 属性值和渲染结果，其实由字体族决定，属性值决定\\`渲染一个字的框大小\\`，字体不同，框的空间利用率不同。所以设置一样大小的文案，在不同字体下可能视觉效果大小不一样。\n\n- font- size: larger，比父元素大一号，大1.2倍\n\n- font- size: smaller，比父元素小一号\n\n- font- size: 80%，父元素大小的百分之80，可以代替上面用法，更精细\n\n- font- size: 1.6em，按父元素比例缩放，和%一样效果，1.6em等效 166%\n\n- font- size: 14px，通过长度单位设置字号，大小取决于显示器分辨率\n\n  > pc一般是96～120ppi，手机是300～500，所以一样的14px，手机可能会显的字体很小。\n\n**字型**\n\n- font- style: italic，倾斜体。默认是normal 竖直体。\n\n##### 文本样式\n\n- text-indent: 12px，**第一行文本缩进**，一般用于段落。tip: 对块级元素才生效\n- text-align: left | right | center | justify等，**文本对齐方式**，左，右，中，两端对齐，作用于块级元素\n- line-height: 30px，设置行高，行框基线之间的距离，默认normal，一般是字号的1.2倍。数值可以使用单位，或者直接使用数字，如line-height: 1，数字意思是换算的系数，写2就是父级两倍行高。行框概念如下：\n\\t ![image.png](https://s2.loli.net/2023/02/16/Zqfm1trnD4pGEwO.png)\n\n- vertical-align: baseline(默认) | middle | top | bottom ｜ 百分比 ｜ 长度值等，**纵向对齐**，适用于行内元素。其中middle不是完全居中对齐，是元素的纵向中点和父元素基线向上偏移1/4em的位置对齐。所以视觉上会居中向上一点点。\n\n   > 也可以是百分比，vertical-align:  0% 就是baseline，数越大，就是越往上抬高\n\n - word-spacing 和 letter-spacing: **单词间距和字符间距**，默认值0，前者用于单词(英文)，对**象形文字(中文)不生效**；后者是字符距离，对所有字符生效。\n\n- text-transform: **文本转换**，uppercase | lowercase | capitalize，分别是大写，小写，首字母大写\n\n- text-decoration: **文本装饰**，none | underline | line-through |，分别是无装饰，下划线，删除线(中间一横)\n\n- text-shadow: rgb(134, 20 ,131) 3px 12px 2px，**文本阴影**，值分别为颜色，横向偏移，纵向偏移，模糊半径(可选)\n\n  > 模糊半径：从阴影的轮廓到模糊效果边界的距离\n\n- white-space: **处理空白**，默认值normal，空白折叠成一个空格，忽略换行，允许自带折叠。多使用在协议声明等大段文案场景。其他属性pre-line | normal | nowrap | pre | pre-wrap如下：\n\n<img src=\"https://s2.loli.net/2023/02/25/oEpb7dcn5UIKB1q.png\" alt=\"image.png\" style=\"zoom:67%;\" />\n\n- overflow-wrap(溢出包裹): **文本换行**，normal ｜ break-word。使用后者，英文单词在换行时，允许单词内部换行。\n\n  > 是否起作用，前提是white-space空白处理，设置的属性值允许换行\n\n#### 元素框\n\n##### 块元素\n\ncss每个元素会生成一个或多个矩形框，称为元素框(element box)，由内容区域，内边距区域，边框区域，外边距区域组成。其中除了内容区域，其他区域可选(可设置为0)，如图\n\n![image.png](https://s2.loli.net/2023/02/25/lJtgxHfb9SpkuDw.png)\n\n> 默认设置元素的width和height值不包含 内边距和外边距\n\n- box-sizing: **框的长宽模式**，content-box(默认值) | border-box，设置border-box的话，宽高的距离计算会包含内边距和边框，如width：400px 是指**左边框**到**右边框**，定义如图：\n\n<img src=\"https://s2.loli.net/2023/02/25/nadvycgGA1b5ZIj.png\" alt=\"image.png\" style=\"zoom: 50%;\" />\n\n- 横向格式化属性：margin-left,  width, margin-right，这三个可以设置auto值\n\n  - 假设盒子总宽500px，设置margin-left:100px; width:100px; margin-right:100px 。margin-right会被覆盖设定为auto\n\n  - 假设盒子总宽500px，设置margin-left:auto; width:100px; margin-right:auto，左右边距的auto会等值，即内容横向剧中\n\n  - 假设盒子总宽500px，设置margin-left:auto; width:auto; margin-right:auto，左右边距的auto会变为0，width撑满\n\n   > 上述的情况，若元素是置换元素，如img。width设置auto，不会自动撑开，会取图片本来的宽度\n\n  > 1、横向外边距不折叠(塌陷)   2、外边距可以为负数  3、内边距，边框，内容区域不能为负数\n\n- 纵向格式化属性：若指定块级元素高度，指定高度>内容高度，多余高度留白；指定高度<内容高度，高度不足，显示效果取决于overflow的设置。\n\n  > **overflow**: visible(默认) | hidden | scroll ，分别表示内容不修剪，超出框范围；内容修剪并隐藏；内容修剪并显示滚动条\n\n  margin-top, height, margin-bottom，这三个可以设置auto值，和横向类似。区别是上下边距为auto, heigh, auto时，上下边距的auto会变为0，所以不能用来实现纵向居中。\n\n  > 特别的，**纵向外边距会折叠**(塌陷)，较小的外边距会被较大的外边距取代。内边距和边框不会\n\n##### 行内元素\n\n- 概念\n  - 行距：font-size和line-height之差，差值除以2后会添到内容区的上部和下部。\n   > **只有非置换元素有行距**。置换元素(如img)，行内框高度 = 内容区高度\n\n  - 行内框：内容区+行距后得到的方框。非置换元素，行内框高度 = line-height的值。\n\n   > **非置换元素行高**，外边距和内边距在**纵向**上对行高度不影响，即不会上下偏移\n   >\n   > **置换元素行高**，外边距和内边距在**纵向**上对行高度有影响\n\n  - 行框：由多个行内框组成，一行可能有多个行内框。行框高度 = 其中的行内框最高点 + 行内框最低点\n\n  > 行框内的多个行内框对齐方式由vertical-align决定\n\n- vertical-align：**行内框纵向对齐方式**，top | bottom | middle | 数值(如px)\n\n  - top：行内框顶边和行框顶边对齐\n\n  - bottom：行内框底边和行框底边对齐\n\n  - middle: 行内框纵向中点 和 父元素的基线往上0.5ex位置对齐\n\n     > ex: 指小写字母x的高度，0.5ex = 小写x的一半的高度。基线指字体底部的线，参考\\`文本\\`一栏\n\n  - 数值：行内框向上或向下移动的距离\n\n- line-height:  **行高**，数值 ｜ 比例系数。可以设置如40px的数值，也可以设置比例如line-height: 1.2，意思是行高是font-size的1.2倍。\n\n  > **优先推荐设置比例系数**，因为可以向下层传递，只要给body设置line-height: 1.2，全局的行高就有了设置。\n\n  > 元素display设置为inlne-block，可以理解为把元素设置成行内置换元素(如img)\n\n##### 边距和边框\n\n- padding：**内边距**，padding：上 右 下 左；取值可以是数值或百分比，后者取父元素块的宽高百分比计算\n\n- margin：**外边距**，默认值0，用法同padding\n\n- border: **边框**，border: 1px solid #666，依次是**边框宽度**，**边框样式**，**颜色**\n\n  - border-width: **边框宽度**，值为数值(如2px)，在设置边框样式前提下，宽度才生效\n\n- border-style: **边框样式**，默认值是none，所以看不见边框，常用是solid(实线)，其它可取值为：double(双实线) ｜ dotten(点线) | dashed(虚线) ｜ inset(内凹线) ｜ outset(外凸线)。可以同时取多个值，如：border-style: dotted solid dashed double; 位置规则和padding一样，上右下左。\n\n- border-color：**边框颜色**，值为合法颜色，顺序规则同padding，可一次设置四个边颜色\n\n- **边框单边**：border-top ｜ border-bottom ｜ border-left｜border-right，用法同border\n\n- border-radius: **边框圆角**，可取数值和百分比。\n\n  - border-radius: 4px，四个角为半径是4px的圆\n\n  - border-radius: 20%，先关注左上角，左边框在距离顶边1/5处向内弯曲，上边框在距离左边1/5处向内弯曲，四个角同效果。若是长方形，形状会趋向于椭圆\n\n  - 可以一次指定四个值，顺序类似padding，为左上，右上，右下，左下\n\n  - 复杂圆角，\\`/ \\`分隔，可以**设置横向和纵向距离**，设定边框弯曲的位置，如border-radius: 1em / 2em。第一个是横向，第二个是纵向。同样可以分别设置四个角，border-radius: 1em 1em 1em 1em / 2em 2em 2em 2em\n\n    <img src=\"https://s2.loli.net/2023/02/27/YqI4jZJWebrphlS.png\" alt=\"image.png\" style=\"zoom: 50%;\" />\n\n- outline：**轮廓**，用法和效果类似border，如outline: 1px solid #666\n\n  - 区别: outline完全**不影响布局**，即不占用位置。\n  - 使用场景：比如按钮悬浮显示其它样式，为了不影响布局，可以使用outline\n\n#### 颜色、背景和渐变\n\n##### 颜色(color)\n\n- color：**前景颜色**，值为颜色值，如#000，rgb(0,0,0)，一般设置在文字和边框，子元素可继承\n\n##### 背景(background)\n\n- background-color: **背景颜色**，默认值为transparent(透明)，值为颜色值，如#000，rgb(0,0,0)，生效范围为内容框，内边距和边框，子元素不继承。\n\n- background-clip: **背景裁剪**，默认值border-box，如上述，生效范围是边框(含边框)以内，假如边框是虚线，虚线之间的透明间隔也将填充背景色。这种情况可通过背景裁剪控制。\n\n  - background-clip: padding-box; 背景生效范围排除边框\n\n  - background-clip: centent-box; 背景生效范围排除边框和内边距\n\n    > tip: background-clip对html，body不生效\n    >\n    > tip: 有border-radius圆角会沿着圆角裁剪\n\n- background-image:url()。 **背景图**，给元素设置背景图，值为url，如**background-image: url(/a.jpg)**\n\n- background-position: top | bottom | left | right | center | 数值。**背景图位置**，元素的背景里设置图，可以设置图在背景里的位置。默认位置是左上角，可以设置\\`一个或俩个值\\`。\n\n  - 若是关键字，如background-position:top left; 就是把图放在背景的左上位置。\n  - 若是数值，则是相对**左上角原点**的偏移量，如**background-position:20px 30px;**  即向右偏20px，向下偏30px。\n\n- background-repeat: repeat(默认值) | repeat-x | repeat-y | no-repeat | space。**背景图重复设置**，图在背景里出现的次数规则，可以设置\\`一个或俩个值\\`，一个值是**横纵坐标都生效**，两个值则分别指横向和纵向。\n\n  - repeat：重复渲染，初始目的是重复背景图，使用小图片实现花式边框，所以默认值repeat\n\n    > repeat-x和repeat-y：同上，设定一个值，指定重复方向\n\n  - no-repeat：不重复渲染，图片渲染一遍，默认放置在左上角\n\n  - space：规则重复渲染。ui系统先确定沿一个轴，可以完全重复多少次，然后沿轴均匀排布\n\n- background-size: auto(默认值) ｜ 数值 ｜ 百分比 ｜ cover ｜contain。**背景图尺寸**，设置图在背景里的尺寸大小\n\n  - 数值：**如background-size: 20px 30px;** 设置背景图宽20px，高30px\n- 百分比：相对背景的定位区域计算(包含边距)，不是裁剪后的区域\n\n  - cover：覆盖整个背景区域，保持图宽高不变(若图和背景区域宽高比例不一样，即部分内容会超出区域)\n- contain：图缩放后正好和背景尺寸一样(宽或高刚好)，允许部分背景区域不被覆盖，保持图宽高不变\n\n##### 渐变(gradient)\n\n**渐变**：从一个颜色到另一个颜色的平滑过渡，**渐变的是图像**，本身没有尺寸，是填满background-size\n\n- **线性渐变**：**linear-gradient**:向量方向(可选, 默认to bottom) ｜ 色标(可多个) 。沿线性向量填充得到渐变，向量叫梯度线(gradient line)。向量方向默认值是to bottom，即从上到下。\n\n  - 向量方向值：\\`关键字\\` 或 \\`度数\\`，前者需要\\`to\\`关键字起头，后者是\\`数值deg\\`，如0deg，0指向顶部，即向量方向从下到上。45deg指左下到右上。\n\n    > 角度可以这样理解，0deg是12点钟方向，45deg是梯度线从12点钟方向，顺时针旋转45度\n\n  - 色标值：颜色 ｜ 间隔距离(可选)，距离不写就是均匀分布。距离可写数值或百分比\n\n  基本示例：**background-image: linear-gradient(90deg, red, black);** 即从左到右，红过渡到黑\n\n  > 颜色可以写rgba，带透明度效果会更好\n\n  带色标距离的示例：**background-image: linear-gradient(90deg, red 10px, black 10px, yellow);** 即从左到右，若总宽100px，红占据10px宽，黑占据10px宽，剩下80px是黑过渡到黄。\n\n- **径向渐变**: **radial-gradient**，属性规则类似线性渐变，渐变边界是曲线。默认位置是圆心，颜色从圆心向外渐变。参数顺序为：尺寸(可选) ｜ 位置(可选) ｜ 色标(可多个)\n\n  - 基本示例：**background-image: radial-gradient(red, black);** 即圆心向外，红到黑渐变\n  - 带渐变距离的示例：background-image: radial-gradient(**10px 20px**, red, black); 横向渐变10px距离，纵向渐变20px距离\n  - 默认位置不是中心点的示例：background-image: radial-gradient(10px 20px, **at 10px 20px**, red, black);\n  - 带色标距离的示例：background-image: radial-gradient(10px 20px, **red 20%, black 30% yellow**);\n\n> 强调：渐变的是背景图，所以可以结合各种背景图样式，实现复杂效果，如尺寸，重复，位置\n\n- 🌰 如下图\n\n\\`\\`\\`css\n// 示例效果：底部绿色圆点组成的一条线。可找个网页f12，找个div，设置下看看效果，帮助理解\nbackground-image: radial-gradient(#21ad68 40%, transparent 50%);\nbackground-size: 10px 10px;\nbackground-repeat: repeat-x;\nbackground-position: bottom;\nbackground-clip: content-box;\n// 些微调整就是圆点背景\nbackground-image: radial-gradient(rgba(33, 173, 104,0.3) 40%, transparent 50%);\nbackground-size: 10px 10px;\nbackground-position: bottom;\nbackground-clip: content-box;\n\\`\\`\\`\n\n\n\n![image.png](https://s2.loli.net/2023/03/01/tHMLXFqKSmjw5QD.png)\n\n##### 盒阴影(box-shadow)\n\nbox-shadow:  **盒阴影**，参数顺序是：向右偏移量 ｜ 偏下移量 ｜ 模糊程度(可选) ｜ 阴影宽度(可选) ｜ 阴影颜色。其中模糊程度默认0，不影响阴影尺寸，阴影宽度影响阴影尺寸，希望窄一些可以给负数。\n\n- 基本示例：**box-shadow: 14px 14px 4px 4px rgba(33, 173, 104,  0.2)**;\n- 阴影形状，默认会跟随元素形状\n- 设置内阴影：少数情况有内阴影，加\\`inset\\`关键字，box-shadow: inset 14px 14px #666\n- 可写多个阴影：box-shadow: 14px 14px 4px 4px rgba(33, 173, 104,  0.2),  -14px -14px 4px 4px rgba(33, 173, 104,  0.2);\n\n  > 可以利用**多重阴影**实现各种效果，例如设定好偏移位置，实现特殊的边框效果\n\n#### 浮动(float)\n\n- float：left | right | none(默认)，非置换元素需要设置宽度，**相对最近的块级祖辈元素浮动**\n  - 浮动元素的margin**纵向内容不折叠**，和其它元素不一样\n  - 设置浮动的元素，默认变成block元素\n\n#### 定位(position)\n\n- position: 定义元素框的具体位置，static(默认) | relative | absolute | fixed | sticky\n\n  - relative：元素形状和位置和未定位的一样\n\n  - absolute:  元素框从文档流中移除，相对**容纳块**定位，建议配合设置width和height\n\n  - fixed：效果类似absolute，不过容纳块确定为**视区自身**\n\n  - sticky: 元素框开始是留在常规文档流，达到触发粘滞条件时，从常规文档中除去，此时相当对于容纳块绝对定位。需要设置top等定位，父元素overflow不是hidden和auto\n\n   >**容纳块**：指包含另一个元素的框体，static和relative元素的容纳块是指最近的\\`块级祖先元素\\`，absolute的容纳块是指最近的\\`非static\\`的祖先元素。\n\n- 绝对布局定位：一般配合position: absolute，可以使用top，left，right，bottom来设置元素在容纳块的位置，起始点是左上角。可以取负值，子元素可以超出容纳块。\n\n- **处理溢出相关的方式：**\n\n  - **极限值**：min-width, min-height, max-width, max-height，用来设置元素的最大最小宽高\n  - **overflow**： visible(默认) | hidden | scroll ，分别表示内容不修剪，超出框范围；内容修剪并隐藏；内容修剪并显示滚动条\n  - **visibility**: visible(默认) ｜ hidden，分布表示展示和隐藏，**隐藏时还会占据位置**\n\n- **处理重叠**\n\n  - z-index: 由后到前，数值越大越上层，上层会覆盖下层，如z-index: 100会覆盖z-index: 0 的元素框\n\n#### 弹性盒子(flex)\n\ncss出现这个概念的目的是实现简单的\\`一维布局\\`，即主轴(中文默认横轴-左到右)方向的布局。\n\n设置元素\\`display: flex\\`或者\\`display: inline-flex\\`就是\\`弹性容器\\`，**直接子元素**就是\\`弹性元素\\`。\n\n##### 应用容器样式\n\nflex：子元素会占满容器主轴(默认横轴)，如果不足以占满则留白处理，以下属性都**应用在容器**上。\n\n- flex-direction: row(默认值) | row-reverse | column | column-reverse, 分别是设置主轴方向：横轴左到右，横轴右到左，纵轴上到下，纵轴下到上。\n\n- flex-wrap: nowrap(默认值) | wrap | wrap-reverse。如果子元素占满主轴后溢出了，默认不换行，可以设置wrap进行换行。\n\n- justify-content: flex-start(默认) | flex-end | center | space-between | space-around | space-evenly。当元素没占满主轴时，留白的处理方式。中文环境上述分别是弹性元素居左，居右，居中，两端对齐，均匀分布。如果内容溢出情况，设置了同样生效。\n\n  >  space-around和space-evenly区别：后者是将留白完全均匀分布在间隙，前者是将留白平均分后，屏幕两侧留白占1/2平均值。\n\n- align-items: flex-start | flex-end | center | baseline | stretch(默认值)。垂直方向的元素排列方式，作用类似justify-content。元素不设置高度时，stretch默认会**拉伸**元素到和容器一样高\n\n##### 应用弹性元素样式\n\n弹性元素：弹性元素外边距不折叠，float对它不起作用，以下是对**单个弹性元素**使用。\n\n- align-self: auto(默认值) ｜ flex-start | flex-end | center | baseline | stretch。使用方式和align-items一样，单个元素可以**覆盖**容器的布局。默认auto是为了**继承容器的align-items的值**\n\n- flex：增长因子(默认0) ｜ 缩减因子(可选, 默认1) ｜ 基准值(可选，默认auto，即弹性元素主轴长度)。\n\n  - flex: 1(最常用)。大于0的数值(可小数)，在弹性元素没有占满主轴时，用来**按比例分配留白空间**\n  - flex: 0, 1。大于0的数值(可小数)，在弹性元素**占满溢出**主轴时，**按比例缩小弹性元素**\n\n  - flex: 1, 0, 200px。数值或百分比或auto，auto就是继承弹性元素的width，百分比是容器宽度的百分比。\n\n- order：整数(默认值0)，改变一个弹性元素在弹性容器里的**视觉顺序**，设置负数则排前面(左)，正数则排后面(右)\n\n > 增长因子，缩减因子配合min-width，可以不使用媒体查询，实现可视区不同宽度，内容弹性变化\n\n#### 栅格(grid)\n\n栅格布局依赖行和列，grid和block(块级)相像，但栅格元素float不生效，vertical-align对栅格元素也不生效。\n\n设置元素\\`display: grid\\`或\\`display: inline-grid\\`就是\\`栅格容器\\`，**直接子元素**就是\\`栅格元素\\`\n\n<img src=\"https://s2.loli.net/2023/03/03/fxUNH1zXy7tClZL.png\" alt=\"image.png\" style=\"zoom: 50%;\" />\n\n概念：\n\n栅格轨道(grid track): 指相邻两条栅格线之间的区域，就是\\`栅格行\\`和\\`栅格列\\`\n\n栅格单元(grid cell): 指四条栅格线之间的区域，类似单元格，是栅格布局的最小单位\n\n栅格区域(grid area): 指任意四条栅格线限定的区域，最小是栅格单元，最大是整个栅格容器\n\n##### 应用容器样式\n\n以下是对**栅格容器**使用\n\n- grid-template-columns: 用来设置纵向栅格线，作用就是划出栅格有几列\n  - 通过**数值和百分数**设置(非弹性)，如**grid-template-columns: 100px 50% 100px**, 假设容器有500px宽，则第一条纵向栅格线在距离左侧边100px位置，第二条在第一条的右侧250px(容器的50%)，第三条在第二条的右侧100px，分隔结束，最右侧**留白**50px\n\n  - 命名栅格线，通过\\`[]\\`可以给栅格线取名，且可以多个，如：grid-template-columns: [start] 100px [col1] 50% [content col2] 100px [end]。start指最左侧默认的线，col1指100px, 即它左侧声明的线\n\n  - 通过\\`fr\\`设置栅格线(弹性)，如**grid-template-columns: 1fr  1fr  1fr**。就是3等分容器的宽度，可以解决上述留白问题。计算方式是，\\`可用空间/fr的合计\\`，结果就是1fr的大小。\n\n  - \\`repeat\\`重复设置栅格线：第一个参数是**重复次数**，第二个是**栅格线位置**，如grid-template-columns: repeat(4, 100px); 即每隔100px设置一条栅格线。\n\n    > grid-template-columns: repeat(2, 100px 1fr) 100px;\n    >\n    > 等价于\n    >\n    > grid-template-columns: 100px 1fr 100px 1fr 100px;\n- grid-template-rows: 用来设置横向栅格线，作用就是划出栅格有几行。使用方式同上述\n- grid-row-gap 和 grid-column-gap: 数值。设置栅格之间间距，可以理解为加粗中间的栅格线。\n\n- grid-template-columns: 10px  1fr  1px; **grid-column-gap: 10px**; 会在三列中间(不包括两边)设置间距10px\n\n- grid-gap: row间距 ｜ column间距，上述的简写\n\n- 对齐方式：同flex，可用\\`justify-content\\`,\\`align-items\\`\n\n- grid-auto-flow: row(默认值) | column，不对栅格元素进行定位时的默认流，栅格元素默认从左到右放置\n\n##### 应用栅格元素样式\n\n以下是对**栅格元素**使用\n\n- 以下四个属性用来定义，栅格元素框的上下左右，来确定位置。\n\n  - grid-row-start 和 grid-row-end: 用来设置元素的横向起始和结束位置。\n  - grid-columns-start 和 grid-columns-end: 用来设置元素的纵向起始和结束位置。\n- grid-row 和 grid-columns: 是上述四个的简写,\\`/\\`分隔开始和结束\n\n  <img src=\"https://s2.loli.net/2023/03/03/8CvZfOgDHGFyQEb.png\" alt=\"image.png\" style=\"zoom:67%;\" />\n\n- 如上图，定义栅格元素位置的方式为：\n\n  - .one {grid-row-start: 2; grid-row-end: 4; grid-columns-start: 2; grid-columns-end: 4;}\n\n  - .two {grid-row-start: 1; grid-row-end: span 2; grid-columns-start: 5; grid-columns-end: span 5;}\n\n    > 这里使用关键字\\`span\\`定义结束位置，span后数字意思是相对开始位置，延伸几行(列)\n\n  - .three{grid-row: 4 / 5; grid-columns: 6 / 7 }\n\n- 对齐方式：同flex，可用\\`align-self\\`\n\n#### 变形(transform)\n\n元素变形可能变大变小，但元素所占的空间和变形前的一致，且对几乎所有元素类型生效\n\n- transform: transform-list。值可以设置一个或多个变形函数，用\\`空格\\`分隔。变形函数从左到右处理。多个变形函数时，其中有一个语法错误，整个变形都不生效。\n\n  > 移动的原点是**左上角**，x正数往右移动，y正数往下移动，z正数往上(更贴近用户的距离)移动\n\n  - translateX()和translateY(): 横向或纵向的\\`平移变化\\`，如transform: translateX(100px)。\n\n    > \\`translate\\`是上面两者的简写，第一个值是x，第二个值是y，如果只写x，默认y取0。如translate(100px, 100px)\n\n  - scaleX()和scaleY(): 横向或纵向\\`缩放变化\\`，值为正数，如**transform: scaleX(2)**。\n\n    > \\`scale\\`是上面两者的简写，第一个值是x，第二个值是y，如果只写x，默认y取x的值。如scale(2)，等价scale(2, 2)\n\n  - rotateX(), rotateY() 和rotate(): \\`旋转变换\\`，分别围绕x，y，z轴旋转，给一个值，单位为\\`deg\\`，如**rotate(45deg)**\n\n    ![image.png](https://s2.loli.net/2023/03/07/DlOsjZPkGrSygXW.png)\n\n    > 其它还有倾斜函数--skew()，视域函数--perspective()，矩阵函数--matrix()，自行谷歌搜索\n\n- transform-origin: 距离左上角横向距离 ｜ 纵向距离。默认旋转中心是绝对中心，不是左上角。假设元素是正方形，设置**transform-origin: 0, 0;** 旋转中心就是左上角。设置50% 50%就是中心点，设置0 100%就是左下角。靠边设置也可以使用关键字：top, left, right, bottom, center。\n\n#### 过渡(transition)\n\n过渡是用来控制\\`一段时间内\\`，\\`指定属性\\`的\\`值的变化\\`，让属性的值逐渐变化，不突兀\n\n- transition-property: 属性名(默认值all)；**指定要产生过度效果的属性**，其它不指定的属性瞬间变化。要指定多个属性就用逗号分隔。如**transition-property: width, color;**\n\n  \\`\\`\\`js\n  // 过渡可以监听，过渡结束后会执行回调方法，可参考如下\n  document.querySelector('div').addEventListener('transitionend',{\n    function(e) {\n      console.log(e.propertyName); // 结束过渡到属性名\n      console.log(e.pseudoElement); // 应用过渡元素的伪元素如:hover\n      console.log(e.elapsedTime); // 过渡持续时间\n    }\n  })\n  \\`\\`\\`\n\n\n\n- transition-duration: 时间(默认值0s)。指定**属性变化的时间**，单位是\\`s\\`或\\`ms\\`。可以给一个值如**transition-duration: 1.2s;** 就是所有的过渡属性都持续1.2s的变化。\n\n  - 也可以指定多个如transition-duration: 1s, 200ms;意思是对应 transition-property声明的多个属性。特别的，若是指定2个持续时间，则是第**奇数**个持续1.2s，第**偶数**个持续200ms。\n\n- transition-timing-function: **过渡动作的内部时序**，如慢速开始，逐渐加快；快速开始，逐渐变慢；平稳进行等。可选的值为：cubic-bezier(), ease, linear, ease-in, ease-out, ease-in-out。\n\n  ![image.png](https://s2.loli.net/2023/03/07/OWhwABx83cp6SD5.png)\n\n  > 其中\\`cubic-bezier()\\`可自定义曲线，参考工具网站：https://cubic-bezier.com/#\n\n- transition-delay: 时间(默认0s)。元素在触发过渡和开始过渡之间的**延迟时间**。类似transition-duration可以声明多个，对应声明的过渡属性。\n- transition：过渡属性(默认all) ｜ 过渡时间(默认0) ｜ 过渡动作(默认ease) ｜ 延迟时间(默认0) 。是上述四项的简写。\n\n#### 动画(@keyframes)\n\n类似过渡transform，但能控制的更细致。默认的，动画结束后，属性还原成动画之前的值\n\n- **@keyframes**: **给动画自定义名称**，并在\\`{}\\`定义关键帧。如\n\n  \\`\\`\\`css\n  @keyframes animationName {\n    ...\n  }\n  \\`\\`\\`\n\n- **关键帧选择符**: 给动画设置某个时刻的属性的属性值，如开始时刻0%(等价于关键字form)，中间时刻50%，结束时刻100%(等价于关键字to)。如果不同时刻，属性值一样，可以写一起，逗号分隔\n\n  \\`\\`\\`css\n  @keyframes animationName {\n    0%, 100% {\n      width: 100px;\n    }\n    50% {\n      width: 200px;\n    }\n  }\n  \\`\\`\\`\n\n- animation-name: 通过@keyframes自定义的名称，**给元素设置动画**。设置多个用逗号分隔\n\n  \\`\\`\\`css\n  div {\n    animation-name: animationName;\n  }\n  \\`\\`\\`\n\n- animation-duration: **定义动画时长**，默认0s。如animation-duration: 2s;\n\n- animation-iteration-count: **定义动画执行次数**，默认1，无限次\\`infinite\\`。如animation-iteration-count: 3;\n\n- animation-direction: **定义动画播放顺序**，默认normal即从0% 到 100%\n\n  - reverse：从100% 到 0%\n  - alternate：第一次从100% 到 0%，第二次从0% 到 100%\n  - alternate-reverse：第一次从0% 到 100%，第二次从100% 到 0%\n\n- animation-delay: **定义动画从触发到执行之间，延迟多少时间**。可以负值，就是从动画中途开始。通过这个属性，可以把不同动画设置不同延迟，实现按顺序触发，\n\n- animation-timing-function: **动画内部时序**，默认ease，使用类似过渡(**transition**)。这个属性特别的，也可以设置在关键帧属性里，如：\n\n  \\`\\`\\`css\n  @keyframes animationName {\n    0%, 100% {\n      width: 100px;\n      animation-timing-function: ease-in;\n    }\n    50% {\n      width: 200px;\n    }\n  }\n  \\`\\`\\`\n\n- animation-play-state: running(默认值) | paused; **定义动画播放状态(运行/暂停)**，暂停结束则运动延续\n\n- animation-fill-mode: none(默认值) | forwards | backwards | both; **设置动画元素在开始，或结束时的样式**。默认动画结束后，样式还原到初始值，若设置backwards，则元素保留动画结束时的样式。\n\n  > **动画的优先顺序**：默认class声明的样式优先级比id声明的低，而动画样式优先级会强化成html标签的\\`行内\\`加\\`!important\\`。\n\n  > **动画和UI线程**：动画在UI线程的绘制优先级是最低的，假设页面加载消耗5s，第一个动画延迟6s播放，则实际是页面加载完后1s播放。\n\n  > **动画事件**：animationstart | animationiteration | animationed; 分布在每个动画开始，结束，一次循环时触发方法。具体使用，自行谷歌。\n\n#### 滤镜/裁剪(filter/clip-path)\n\nfilter: none(默认值) ｜ **滤镜函数**。滤镜函数可以有多个，空格分隔，按左到右顺序执行。\n\n- blur(length): **模糊**，值为长度，如blur(2px)；\n- opacity(number | 百分比): 不透明度，如opacity(0.8);\n- drop-shadow(值): 给带透明度的图片，沿形状设置阴影。值设置和box-shadow规则一样，如drop-shadow(2px 7px 8px lightblue)，效果如下(希望更丰富可以设置多个阴影滤镜)：\n\n<img src=\"https://s2.loli.net/2023/03/13/2PryfqYcw63SIaB.png\" alt=\"image.png\" style=\"zoom: 67%;\" />\n\n\n\n- 颜色滤镜\n\n  - grayscale(number | 百分比): 改变颜色灰阶，0没变化，1颜色变灰色。如特殊时期，全网站颜色置灰时候用。\n\n  - sepia(number | 百分比): 作用和用法同上，只是设置1时灰色改为#704214(**红褐色**)\n\n  - invert(number | 百分比): 取颜色\\`反相\\`，0没变化，1完全反相\n\n    > 反相：如rgb(200, 100, 20); 反相就是各值用255减一下得到 rbg(55, 155,235);\n\n  - hue-rotate(angle): 在色轮上旋转色相，改变颜色，饱和度和明度不变。如hue-rotate(45deg):\n\n- 亮度，对比度，饱和度\n\n  - brightness(number | 百分比):  调整**亮度**，0则为黑色，1则没变化，大于1则变亮直到全白色。\n  - contrast(number | 百分比): 调整**对比度**，越高越容易区分颜色。0为纯灰色，1则没变化，大于1对比度变大。\n  - saturate(number | 百分比):  调整饱和度，越高颜色越鲜艳。0为灰色，1则没变化，大于1则过饱和\n\n- clip-path: 裁剪函数。其它函数如 inset(), circle(), ellipse() 自行谷歌。\n\n  - polygon(): 一系列以逗号分隔的xy坐标组合。如clip-path: polygon(0 10px, 20px 0, 20px 20px);左上角是(0,0)，三个以上的点围成一个面，元素只显示这个围成的形状。**使用场景**：可以给div设置一个背景色，设置不同形状，比如实现\\`箭头\\`。\n\n  > 其它还有\\`mask\\`蒙版系列样式，\\`mix-blend-mode\\`混合系列样式，使用时自行谷歌。\n\n#### 媒体\n\n通过媒体来判断要不要渲染css样式，以实现不同终端(尺寸不同)有不同样式。\n\n@media (规则) and (规则) { css样式 }：通过如上格式定义，其中规则可设置如下：\n\n- width, min-width, max-width: 设置宽度(页面)，屏幕页面符合宽度的渲染css\n\n- height, min-width, max-height: 设置高度(页面)，屏幕页面符合高度的渲染css\n\n  > device-width, min-device-width, max-device-width; device-height, min-device-height, max-device-heitht; 效果类似上述六个，只是由页面的宽高，精确为设备屏幕的宽高\n\n  > 其它还有\\`min-aspect-ratio\\`, \\`max-aspect-ratio\\`是宽与高的比值；\\`orientation\\`是宽和高哪个更大(横屏，竖屏)。其它多种判断规则，自行谷歌\n\n🌰\n\n\\`\\`\\`css\n// 小屏样式\n@media (max-width: 400px) {\n  css样式\n}\n// 中屏样式\n@media (min-width: 401px) and (max-width: 1000px) {\n  css样式\n}\n// 大屏样式\n@media (min-width: 1001px) {\n  css样式\n}\n\\`\\`\\`\n\n\\`\\`\\`css\n// 宽比高大 - 横屏样式\n@media (orientation: landscape) {\n  css样式\n}\n// 高比宽大 - 竖屏样式\n@media (orientation: portrait) {\n  css样式\n}\n\\`\\`\\`\n\n#### 全局属性值\n\n- inherit：继承，被应用的属性继承父级的该属性\n- initial：初始化，把应用属性初始为它默认的样式，并且排除继承的干扰。默认会继承的属性也不在默认继承，而是表现出没有任何设置时候的默认样式\n- unset：无设置，如果元素该属性默认继承属性，该值等同于inherit。如果元素该属性是非继承属性，该值等同于initial\n\n🌰\n\n\\`\\`\\`css\ndiv {\n  color: red;\n}\ndiv .child {\n  color: unset;  /* 该属性默认继承，所以继承父元素的红色，等同于inherit */\n}\n\\`\\`\\`\n\n\n\n      `,\n    };\n  },\n  methods: {\n  },\n}\n</script>\n\n<style scoped>\n/deep/ .github-markdown-body {\n  padding: 12px 16px 0px;\n}\n.demo-content {\n  border: 1px solid rgba(244,244,244, 0.9);\n  padding: 12px 40px 24px;\n  margin-bottom: 12px;\n}\n.file-text {\n  color: #657cc4;\n}\n</style>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./cssRule.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./cssRule.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./cssRule.vue?vue&type=template&id=fa9ecda6&scoped=true&lang=pug&\"\nimport script from \"./cssRule.vue?vue&type=script&lang=js&\"\nexport * from \"./cssRule.vue?vue&type=script&lang=js&\"\nimport style0 from \"./cssRule.vue?vue&type=style&index=0&id=fa9ecda6&prod&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"fa9ecda6\",\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}