(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-fbb08b42"],{"1fda":function(n,t,e){},be84:function(n,t,e){"use strict";e("1fda")},f4c2:function(n,t,e){"use strict";e.r(t);var o=function(){var n=this,t=n._self._c;return t("div",[t("v-md-editor",{staticClass:"github-markdown-body",attrs:{value:n.text,mode:"preview"}}),t("div",{staticClass:"demo-content"})],1)},s=[],a={components:{},data:function(){return{text:'\n  ### 推荐文章列表\n  [1、Javascript定义类（class）的三种方法](https://www.ruanyifeng.com/blog/2012/07/three_ways_to_define_a_javascript_class.html)\n  > 极简主义法生成`类`，不借用this和prototype\n\n  [2、JavaScript与有限状态机](https://www.ruanyifeng.com/blog/2013/09/finite-state_machine_for_javascript.html)\n  > 了解有限状态机的概念，通过状态机代替回调函数，发布/订阅，事件监听。意思有点类似[Redux](https://www.redux.org.cn/docs/introduction/Motivation.html)\n\n  [3、什么是 Event Loop？](https://www.ruanyifeng.com/blog/2014/10/event-loop.html)\n  > 说明js单线程是怎么实现异步模式。具体细则还可参考[这个文章](https://www.cnblogs.com/yqx0605xi/p/9267827.html)\n\n  [4、Thunk 函数的含义和用法](https://www.ruanyifeng.com/blog/2015/05/thunk.html)\n  > 柯里化？ Thunk+Generator处理异步，看下是不是很像async + await ?\n\n  [5、async 函数的含义和用法](https://www.ruanyifeng.com/blog/2015/05/async.html)\n  > async和await是Thunk+Generator的终极版本\n\n  [6、Flux 架构简单认识](https://www.ruanyifeng.com/blog/2016/01/flux.html)\n  > 相比状态机的概念，Flux和Redux更相近了\n\n  [7、npm 模块安装机制简介](https://www.ruanyifeng.com/blog/2016/01/npm-install.html)\n  > 了解基本流程即可，从缓存取依赖来加快install的方式是否可取，自行判断\n\n  [8、浏览器同源政策及其规避方法](https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html)和[跨域资源共享 CORS 详解](https://www.ruanyifeng.com/blog/2016/04/cors.html)\n  > 主要了解基本意义，H5提供的window.postMessage，以及CORS(实现CORS通信的关键是后台服务)\n\n  [9、IntersectionObserver API 使用教程](https://www.ruanyifeng.com/blog/2016/11/intersectionobserver_api.html)\n  > 用来"观察"元素是否可见，是监听scroll的更优解\n\n  [10、Pointfree 编程风格指南](https://www.ruanyifeng.com/blog/2017/03/pointfree.html)\n  > 通过组合可复用的简单函数，生成合乎业务逻辑的复杂函数的方案，是函数式编程的具体应用方式\n\n  [11、Reduce 和 Transduce 的含义](https://www.ruanyifeng.com/blog/2017/03/reduce_transduce.html)\n  > 数组的reduce和map关系令我对map印象加深，而标题Transduce方法，它是Ramda这个js库的，可选择性阅读\n\n  [12、浏览器数据库 IndexedDB](https://www.ruanyifeng.com/blog/2018/07/indexeddb.html)\n  > 主要是了解前端也支持这样一种功能，使用场景可能不多，比如将用户信息如用户个人图片转为base64，存储在浏览器数据库\n\n  [13、Web Worker 使用教程](https://www.ruanyifeng.com/blog/2018/07/web-worker.html)\n  > 解决页面计算复杂，但机器性能优秀，由于js单线程导致ui交互卡顿的问题。公司使用场景不多，但需要前端人员确实知道有这样的功能\n\n  [14、Web Components 入门实例教程](https://www.ruanyifeng.com/blog/2019/08/web_components.html)\n  > 使用Web Components API 提供的`template`标签，实现组件，效果类似vue和react组件\n  '}},methods:{}},w=a,r=(e("be84"),e("2877")),i=Object(r["a"])(w,o,s,!1,null,"a819be24",null);t["default"]=i.exports}}]);
//# sourceMappingURL=chunk-fbb08b42.0649863d.js.map